// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      String   @default("user")
  orders    Order[]
  reservations Reservation[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MenuCategory {
  id    Int    @id @default(autoincrement())
  name  String
  items MenuItem[]
}

model MenuItem {
  id          Int    @id @default(autoincrement())
  name        String
  description String?
  price       Float
  category    MenuCategory @relation(fields: [categoryId], references: [id])
  categoryId  Int
  orderItems  OrderItem[]
}

model Order {
  id         Int        @id @default(autoincrement())
  user       User       @relation(fields: [userId], references: [id])
  userId     Int
  items      OrderItem[]
  status     String     @default("pending")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  menuItem  MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId Int
  quantity  Int      @default(1)
}

model Reservation {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  tableNum   Int
  time       DateTime
  status     String   @default("active")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
